openssl enc -aes-192-ecb -in Image.png -out Image_encrypt.png -pass pass:CO3114
openssl enc -d -aes-192-ecb -in Image_encrypt.png -out original.png -pass pass:CO3114

openssl enc -aes-128-ecb -in plain.txt -out cipher1.enc -pass pass:CO3114
cat cipher1.enc
openssl enc -des-ede3 -in cipher1.enc -out cipher2.enc -pass pass:CO3114
openssl enc -d -des-ede3 -in cipher2.enc -out org1.enc -pass pass:CO3114
openssl enc -d -aes-128 -ecb -in org1.enc -out org2.txt -pass pass:CO3114




import java.util.*;

public class Caesar_Cipher {

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        Caesar_Cipher obj = new Caesar_Cipher();

        char alphabet[]={'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
        int key = 3;

        System.out.print("Enter plaintext: ");
        String readText = s.nextLine();
        readText = readText.toUpperCase();
        s.close();

        String cipherText = obj.encryption(readText, alphabet, key);
        System.out.println("\ncipher text: " + cipherText);

        String plainText = obj.decryption(cipherText, alphabet, key);
        System.out.println("plain text: " + plainText);
    }

    private String encryption(String plainText, char alphabet[], int key){
        StringBuilder sb = new StringBuilder();
        char check_space[] = {' '};

        for(int i=0; i<plainText.length(); i++){
            if(plainText.charAt(i) == check_space[0])
                sb.append(check_space[0]);

            for(int j=0; j<alphabet.length; j++){
                if(plainText.charAt(i) == alphabet[j]){
                    int keyValue = (j+key) % 26;
                    sb.append(alphabet[keyValue]);
                }
            }
        }

        String cipherText = sb.toString();
        return cipherText;
    }
    
    private String decryption(String cipherText, char alphabet[], int key){
        StringBuilder sb = new StringBuilder();
        char check_space[] = {' '};

        for(int i=0; i<cipherText.length(); i++){
            if(cipherText.charAt(i) == check_space[0])
                sb.append(check_space[0]);

            for(int j=0; j<alphabet.length; j++){
                if(cipherText.charAt(i) == alphabet[j]){
                    int keyValue = (j-key+26) % 26;
                    sb.append(alphabet[keyValue]);
                }
            }
        }

        String plainText = sb.toString();
        return plainText;
    }
}

--------------------------------
RFCEncryption

import java.util.*;

public class RFCEncryption {
    public static void main(String args[]) {

        Scanner sc = new Scanner(System.in);

        System.out.print("Input the plaintext message : ");
        String plaintext = sc.nextLine();

        System.out.print("Enter the Key Value : ");
        int key = sc.nextInt();

		sc.close();
		
		int pl = plaintext.length();
		
		char[][] keymatrix  = new char[key][pl];
		char alphabet;
		
		int i = 0, j = 0;
        boolean d = true;
		
        for ( j = 0; j < pl; j++){
			if(d){
				keymatrix[i][j] = plaintext.charAt(j);
				i+=1;
				if(i==(key-1)){
					d = false;
				}
			}else{
				keymatrix[i][j] = plaintext.charAt(j);
				i-=1;
				if(i==0){
					d = true;
				}
			}
		}
		
		for ( i = 0; i < key; i++) {
			for ( j = 0; j < pl; j++) {
				alphabet = keymatrix[i][j];
				if (alphabet != '\0') {
					System.out.print(alphabet);
				}
			}
		}
    }
}

--------------------------
RFCDecryption


import java.util.*;

public class RFCDecryption {
    public static void main(String args[]) {

        Scanner sc = new Scanner(System.in);

        System.out.print("Input the Ciphertext Message : ");
        String ciphertext = sc.nextLine();

        System.out.print("Enter the Key Value : ");
        int key = sc.nextInt();

		sc.close();

        int pl = ciphertext.length();

        char[][] keymatrix = new char[key][pl];

		int i = 0, j = 0;
        boolean d = true;

        for ( j = 0; j < pl; j++){
			if(d){
				keymatrix[i][j] = '*';
				i+=1;
				if(i==(key-1)){
					d = false;
				}
			}else{
				keymatrix[i][j] = '*';
				i-=1;
				if(i==0){
					d = true;
				}
			}
		}

        int x = 0;

        for ( i = 0; i < key; i++){
            for ( j = 0; j < pl; j++) {
                if(keymatrix[i][j]=='*' && x < ciphertext.length()){
                    keymatrix[i][j] = ciphertext.charAt(x);
                    x++;
                }
            }
        }

        d = true; 
        i = 0;

        for (j = 0; j < pl; j++){
			if(d){
                System.out.print(keymatrix[i][j] );
				i+=1;
				if(i==(key-1)){
					d = false;
				}
			}else{
                System.out.print(keymatrix[i][j] );
				i-=1;
				if(i==0){
					d = true;
				}
			}
		}

    }
}


