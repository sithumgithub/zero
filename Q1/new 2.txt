a. DDA Line Drawing Algorithm

public void dda(Graphics g, int x1, int y1, int x2, int y2) {
    int dx = x2 - x1;
    int dy = y2 - y1;
    int steps = Math.max(Math.abs(dx), Math.abs(dy));

    float xIncrement = (float) dx / steps;
    float yIncrement = (float) dy / steps;

    float x = x1;
    float y = y1;

    for (int i = 0; i <= steps; i++) {
        g.drawRect(Math.round(x), Math.round(y), 1, 1); // plot pixel
        x += xIncrement;
        y += yIncrement;
    }
}

b. Translate a Point

public void translatePoint(Graphics g, int P[], int T[]) {
    int newX = P[0] + T[0];
    int newY = P[1] + T[1];
    g.fillOval(newX, newY, 5, 5); // Draw translated point
}

c. Translate a Line

public void translateLine(Graphics g, int P[][], int T[]) {
    int x1 = P[0][0] + T[0];
    int y1 = P[0][1] + T[1];
    int x2 = P[1][0] + T[0];
    int y2 = P[1][1] + T[1];
    dda(g, x1, y1, x2, y2); // Call dda method to draw the translated line
}

d. Scaling the Polygon

public void scale(Graphics g, int x[], int y[], int sx, int sy) {
    for (int i = 0; i < x.length; i++) {
        x[i] = x[i] * sx;
        y[i] = y[i] * sy;
    }
    g.drawPolygon(x, y, x.length); // Draw the scaled polygon
}

e. Full Java Code to Perform the Translation and Scaling

import javax.swing.*;
import java.awt.*;

public class Transformations extends JPanel {

    // DDA Line Drawing Algorithm
    public void dda(Graphics g, int x1, int y1, int x2, int y2) {
        int dx = x2 - x1;
        int dy = y2 - y1;
        int steps = Math.max(Math.abs(dx), Math.abs(dy));

        float xIncrement = (float) dx / steps;
        float yIncrement = (float) dy / steps;

        float x = x1;
        float y = y1;

        for (int i = 0; i <= steps; i++) {
            g.drawRect(Math.round(x), Math.round(y), 1, 1);
            x += xIncrement;
            y += yIncrement;
        }
    }

    // Translate a point
    public void translatePoint(Graphics g, int P[], int T[]) {
        int newX = P[0] + T[0];
        int newY = P[1] + T[1];
        g.fillOval(newX, newY, 5, 5); // Draw translated point
    }

    // Translate a line
    public void translateLine(Graphics g, int P[][], int T[]) {
        int x1 = P[0][0] + T[0];
        int y1 = P[0][1] + T[1];
        int x2 = P[1][0] + T[0];
        int y2 = P[1][1] + T[1];
        dda(g, x1, y1, x2, y2); // Draw translated line
    }

    // Scaling
    public void scale(Graphics g, int x[], int y[], int sx, int sy) {
        for (int i = 0; i < x.length; i++) {
            x[i] = x[i] * sx;
            y[i] = y[i] * sy;
        }
        g.drawPolygon(x, y, x.length); // Draw scaled polygon
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        // Original Triangle
        int[] x = {100, 150, 50};
        int[] y = {100, 200, 200};

        g.drawPolygon(x, y, 3); // Draw original triangle

        // Translation (translate by (7, 9))
        int[] translation = {7, 9};
        translateLine(g, new int[][]{{x[0], y[0]}, {x[1], y[1]}}, translation);

        // Scaling (scale by 4 and 8 for sx, sy)
        scale(g, x, y, 4, 8);
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame();
        Transformations panel = new Transformations();
        frame.add(panel);
        frame.setSize(800, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}


